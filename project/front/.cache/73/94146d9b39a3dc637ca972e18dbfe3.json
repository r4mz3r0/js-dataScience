{"id":"node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"vega-event-selector","loc":{"line":4,"column":36},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-event-selector/index.js"},{"name":"../../../channel","loc":{"line":5,"column":24},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/channel.js"},{"name":"../interval","loc":{"line":6,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/interval.js"},{"name":"../selection","loc":{"line":7,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/selection.js"},{"name":"./scales","loc":{"line":8,"column":44},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/scales.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_event_selector_1 = require(\"vega-event-selector\");\nvar channel_1 = require(\"../../../channel\");\nvar interval_1 = require(\"../interval\");\nvar selection_1 = require(\"../selection\");\nvar scales_1 = tslib_1.__importStar(require(\"./scales\"));\nvar ANCHOR = '_translate_anchor';\nvar DELTA = '_translate_delta';\nvar translate = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var hasScales = scales_1.default.has(selCmpt);\n        var anchor = name + ANCHOR;\n        var _a = selection_1.positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var events = vega_event_selector_1.selector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(function (e) { return (e.between[0].markname = name + interval_1.BRUSH, e); });\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [{\n                    events: events.map(function (e) { return e.between[0]; }),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== null ? ', extent_x: ' + (hasScales ? scales_1.domain(model, channel_1.X) :\n                            \"slice(\" + selection_1.channelSignalName(selCmpt, 'x', 'visual') + \")\") : '') +\n                        (y !== null ? ', extent_y: ' + (hasScales ? scales_1.domain(model, channel_1.Y) :\n                            \"slice(\" + selection_1.channelSignalName(selCmpt, 'y', 'visual') + \")\") : '') + '}'\n                }]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [{\n                    events: events,\n                    update: \"{x: \" + anchor + \".x - x(unit), y: \" + anchor + \".y - y(unit)}\"\n                }]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, channel_1.X, 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, channel_1.Y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexports.default = translate;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    var name = selCmpt.name;\n    var hasScales = scales_1.default.has(selCmpt);\n    var signal = signals.filter(function (s) {\n        return s.name === selection_1.channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    var anchor = name + ANCHOR;\n    var delta = name + DELTA;\n    var sizeSg = model.getSizeSignalRef(size).signal;\n    var scaleCmpt = model.getScaleComponent(channel);\n    var scaleType = scaleCmpt.get('type');\n    var sign = hasScales && channel === channel_1.X ? '-' : ''; // Invert delta when panning x-scales.\n    var extent = anchor + \".extent_\" + channel;\n    var offset = \"\" + sign + delta + \".\" + channel + \" / \" + (hasScales ? \"\" + sizeSg : \"span(\" + extent + \")\");\n    var panFn = !hasScales ? 'panLinear' :\n        scaleType === 'log' ? 'panLog' :\n            scaleType === 'pow' ? 'panPow' : 'panLinear';\n    var update = panFn + \"(\" + extent + \", \" + offset +\n        (hasScales && scaleType === 'pow' ? \", \" + (scaleCmpt.get('exponent') || 1) : '') + ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : \"clampRange(\" + update + \", 0, \" + sizeSg + \")\"\n    });\n}\n"},"sourceMaps":{"js":{"version":3,"file":"translate.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/translate.ts"],"names":[],"mappings":"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","sourcesContent":["import {selector as parseSelector} from 'vega-event-selector';\n\nimport {ScaleChannel, X, Y} from '../../../channel';\nimport {VgSignal} from '../../../vega.schema';\nimport {BRUSH as INTERVAL_BRUSH} from '../interval';\nimport {channelSignalName, positionalProjections, SelectionComponent} from '../selection';\nimport {UnitModel} from './../../unit';\nimport scalesCompiler, {domain} from './scales';\nimport {TransformCompiler} from './transforms';\n\n\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\n\nconst translate:TransformCompiler = {\n  has: function(selCmpt) {\n    return selCmpt.type === 'interval' && selCmpt.translate;\n  },\n\n  signals: function(model, selCmpt, signals) {\n    const name = selCmpt.name;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const anchor = name + ANCHOR;\n    const {x, y} = positionalProjections(selCmpt);\n    let events = parseSelector(selCmpt.translate, 'scope');\n\n    if (!hasScales) {\n      events = events.map((e) => (e.between[0].markname = name + INTERVAL_BRUSH, e));\n    }\n\n    signals.push({\n      name: anchor,\n      value: {},\n      on: [{\n        events: events.map((e) => e.between[0]),\n        update: '{x: x(unit), y: y(unit)' +\n          (x !== null ? ', extent_x: ' + (hasScales ? domain(model, X) :\n              `slice(${channelSignalName(selCmpt, 'x', 'visual')})`) : '') +\n\n          (y !== null ? ', extent_y: ' + (hasScales ? domain(model, Y) :\n              `slice(${channelSignalName(selCmpt, 'y', 'visual')})`) : '') + '}'\n      }]\n    }, {\n      name: name + DELTA,\n      value: {},\n      on: [{\n        events: events,\n        update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n      }]\n    });\n\n    if (x !== null) {\n      onDelta(model, selCmpt, X, 'width', signals);\n    }\n\n    if (y !== null) {\n      onDelta(model, selCmpt, Y, 'height', signals);\n    }\n\n    return signals;\n  }\n};\n\nexport default translate;\n\nfunction onDelta(model: UnitModel, selCmpt: SelectionComponent, channel: ScaleChannel, size: 'width' | 'height', signals: VgSignal[]) {\n  const name = selCmpt.name;\n  const hasScales = scalesCompiler.has(selCmpt);\n  const signal = signals.filter(s => {\n    return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n  })[0];\n  const anchor = name + ANCHOR;\n  const delta = name + DELTA;\n  const sizeSg = model.getSizeSignalRef(size).signal;\n  const scaleCmpt = model.getScaleComponent(channel);\n  const scaleType = scaleCmpt.get('type');\n  const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n  const extent = `${anchor}.extent_${channel}`;\n  const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n  const panFn = !hasScales ? 'panLinear' :\n    scaleType === 'log' ? 'panLog' :\n    scaleType === 'pow' ? 'panPow' : 'panLinear';\n  const update = `${panFn}(${extent}, ${offset}` +\n    (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') + ')';\n\n  signal.on.push({\n    events: {signal: delta},\n    update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n  });\n}\n"]}},"error":null,"hash":"851095f323c1fb399e8dfc0f88603024","cacheData":{"env":{}}}