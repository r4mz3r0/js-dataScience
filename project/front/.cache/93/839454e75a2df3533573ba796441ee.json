{"id":"node_modules/vega-lite/build/src/compile/projection/assemble.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/projection/assemble.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/projection/assemble.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"../../util","loc":{"line":4,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/projection/assemble.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/util.js"},{"name":"../../vega.schema","loc":{"line":5,"column":28},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/projection/assemble.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/vega.schema.js"},{"name":"../model","loc":{"line":6,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/projection/assemble.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/model.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar model_1 = require(\"../model\");\nfunction assembleProjections(model) {\n    if (model_1.isLayerModel(model) || model_1.isConcatModel(model) || model_1.isRepeatModel(model)) {\n        return assembleProjectionsForModelAndChildren(model);\n    }\n    else {\n        return assembleProjectionForModel(model);\n    }\n}\nexports.assembleProjections = assembleProjections;\nfunction assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce(function (projections, child) {\n        return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n}\nexports.assembleProjectionsForModelAndChildren = assembleProjectionsForModelAndChildren;\nfunction assembleProjectionForModel(model) {\n    var component = model.component.projection;\n    if (!component || component.merged) {\n        return [];\n    }\n    var projection = component.combine();\n    var name = projection.name, rest = tslib_1.__rest(projection, [\"name\"]); // we need to extract name so that it is always present in the output and pass TS type validation\n    var size = {\n        signal: \"[\" + component.size.map(function (ref) { return ref.signal; }).join(', ') + \"]\"\n    };\n    var fit = component.data.reduce(function (sources, data) {\n        var source = vega_schema_1.isVgSignalRef(data) ? data.signal : \"data('\" + model.lookupDataSource(data) + \"')\";\n        if (!util_1.contains(sources, source)) {\n            // build a unique list of sources\n            sources.push(source);\n        }\n        return sources;\n    }, []);\n    if (fit.length <= 0) {\n        throw new Error(\"Projection's fit didn't find any data sources\");\n    }\n    return [tslib_1.__assign({ name: name,\n            size: size, fit: {\n                signal: fit.length > 1 ? \"[\" + fit.join(', ') + \"]\" : fit[0]\n            } }, rest)];\n}\nexports.assembleProjectionForModel = assembleProjectionForModel;\n"},"sourceMaps":{"js":{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/projection/assemble.ts"],"names":[],"mappings":";;;AAAA,mCAAoC;AACpC,iDAA2E;AAC3E,kCAA2E;AAE3E,6BAAoC,KAAY;IAC9C,IAAI,oBAAY,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,IAAI,qBAAa,CAAC,KAAK,CAAC,EAAE;QACvE,OAAO,sCAAsC,CAAC,KAAK,CAAC,CAAC;KACtD;SAAM;QACL,OAAO,0BAA0B,CAAC,KAAK,CAAC,CAAC;KAC1C;AACH,CAAC;AAND,kDAMC;AAED,gDAAuD,KAAY;IACjE,OAAO,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAC,WAAW,EAAE,KAAK;QAC9C,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACzD,CAAC,EAAE,0BAA0B,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,CAAC;AAJD,wFAIC;AAED,oCAA2C,KAAY;IACrD,IAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;IAC7C,IAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;QAClC,OAAO,EAAE,CAAC;KACX;IAED,IAAM,UAAU,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;IAChC,IAAA,sBAAI,EAAE,2CAAO,CAAe,CAAE,iGAAiG;IAEtI,IAAM,IAAI,GAAgB;QACxB,MAAM,EAAE,MAAI,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,MAAM,EAAV,CAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG;KAClE,CAAC;IAEF,IAAM,GAAG,GAAa,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,IAAI;QACxD,IAAM,MAAM,GAAW,2BAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,WAAS,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAI,CAAC;QACrG,IAAI,CAAC,eAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;YAC9B,iCAAiC;YACjC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;KAClE;IAED,OAAO,oBACL,IAAI,MAAA;YACJ,IAAI,MAAA,EACJ,GAAG,EAAE;gBACH,MAAM,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACxD,IACE,IAAI,EACP,CAAC;AACL,CAAC;AAlCD,gEAkCC","sourcesContent":["import {contains} from '../../util';\nimport {isVgSignalRef, VgProjection, VgSignalRef} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\n\nexport function assembleProjections(model: Model): VgProjection[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    return assembleProjectionsForModelAndChildren(model);\n  } else {\n    return assembleProjectionForModel(model);\n  }\n}\n\nexport function assembleProjectionsForModelAndChildren(model: Model): VgProjection[] {\n  return model.children.reduce((projections, child) => {\n    return projections.concat(child.assembleProjections());\n  }, assembleProjectionForModel(model));\n}\n\nexport function assembleProjectionForModel(model: Model): VgProjection[] {\n  const component = model.component.projection;\n  if (!component || component.merged) {\n    return [];\n  }\n\n  const projection = component.combine();\n  const {name, ...rest} = projection;  // we need to extract name so that it is always present in the output and pass TS type validation\n\n  const size: VgSignalRef = {\n    signal: `[${component.size.map((ref) => ref.signal).join(', ')}]`\n  };\n\n  const fit: string[] = component.data.reduce((sources, data) => {\n    const source: string = isVgSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n    if (!contains(sources, source)) {\n      // build a unique list of sources\n      sources.push(source);\n    }\n    return sources;\n  }, []);\n\n  if (fit.length <= 0) {\n    throw new Error(\"Projection's fit didn't find any data sources\");\n  }\n\n  return [{\n    name,\n    size,\n    fit: {\n      signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n    },\n    ...rest\n  }];\n}\n"]}},"error":null,"hash":"dafb3c646ee3bfc555caf31bb2510dba","cacheData":{"env":{}}}