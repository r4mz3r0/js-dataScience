{"id":"node_modules/vega-lite/build/src/compile/mark/line.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/line.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/line.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"./mixins","loc":{"line":4,"column":42},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/line.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/mixins.js"},{"name":"./valueref","loc":{"line":5,"column":39},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/line.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/mark/valueref.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar mixins = tslib_1.__importStar(require(\"./mixins\"));\nvar ref = tslib_1.__importStar(require(\"./valueref\"));\nexports.line = {\n    vgMark: 'line',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n        }), mixins.defined(model));\n    }\n};\nexports.trail = {\n    vgMark: 'trail',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), mixins.defined(model));\n    }\n};\n"},"sourceMaps":{"js":{"version":3,"file":"line.js","sourceRoot":"","sources":["../../../../src/compile/mark/line.ts"],"names":[],"mappings":";;;AAEA,uDAAmC;AACnC,sDAAkC;AAErB,QAAA,IAAI,GAAiB;IAChC,MAAM,EAAE,MAAM;IACd,WAAW,EAAE,UAAC,KAAgB;QACrB,IAAA,mBAAK,EAAE,qBAAM,CAAU;QAE9B,4BACK,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC,EACjE,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAChD,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EACjD,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE;YACnC,SAAS,EAAE,aAAa,CAAE,gCAAgC;SAC3D,CAAC,EACC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EACxB;IACJ,CAAC;CACF,CAAC;AAGW,QAAA,KAAK,GAAiB;IACjC,MAAM,EAAE,OAAO;IACf,WAAW,EAAE,UAAC,KAAgB;QACrB,IAAA,mBAAK,EAAE,qBAAM,CAAU;QAE9B,4BACK,MAAM,CAAC,eAAe,CAAC,KAAK,EAAE,EAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAC,CAAC,EAClE,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAChD,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EACjD,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,EACjC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EACxB;IACJ,CAAC;CACF,CAAC","sourcesContent":["import {UnitModel} from '../unit';\nimport {MarkCompiler} from './base';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\n\nexport const line: MarkCompiler = {\n  vgMark: 'line',\n  encodeEntry: (model: UnitModel) => {\n    const {width, height} = model;\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'ignore', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, ref.mid(width)),\n      ...mixins.pointPosition('y', model, ref.mid(height)),\n      ...mixins.nonPosition('size', model, {\n        vgChannel: 'strokeWidth'  // VL's line size is strokeWidth\n      }),\n      ...mixins.defined(model)\n    };\n  }\n};\n\n\nexport const trail: MarkCompiler = {\n  vgMark: 'trail',\n  encodeEntry: (model: UnitModel) => {\n    const {width, height} = model;\n\n    return {\n      ...mixins.baseEncodeEntry(model, {size: 'include', orient: 'ignore'}),\n      ...mixins.pointPosition('x', model, ref.mid(width)),\n      ...mixins.pointPosition('y', model, ref.mid(height)),\n      ...mixins.nonPosition('size', model),\n      ...mixins.defined(model)\n    };\n  }\n};\n"]}},"error":null,"hash":"461a1f62239875af020e7f80a313de88","cacheData":{"env":{}}}