{"id":"node_modules/vega-lite/build/src/compile/concat.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"../log","loc":{"line":4,"column":39},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/log.js"},{"name":"../spec","loc":{"line":5,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/spec.js"},{"name":"./baseconcat","loc":{"line":6,"column":27},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/baseconcat.js"},{"name":"./buildmodel","loc":{"line":7,"column":27},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/buildmodel.js"},{"name":"./layoutsize/parse","loc":{"line":8,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/concat.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/layoutsize/parse.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar log = tslib_1.__importStar(require(\"../log\"));\nvar spec_1 = require(\"../spec\");\nvar baseconcat_1 = require(\"./baseconcat\");\nvar buildmodel_1 = require(\"./buildmodel\");\nvar parse_1 = require(\"./layoutsize/parse\");\nvar ConcatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ConcatModel, _super);\n    function ConcatModel(spec, parent, parentGivenName, repeater, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'concat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        _this.isVConcat = spec_1.isVConcatSpec(spec);\n        _this.children = (spec_1.isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map(function (child, i) {\n            return buildmodel_1.buildModel(child, _this, _this.getName('concat_' + i), undefined, repeater, config, false);\n        });\n        return _this;\n    }\n    ConcatModel.prototype.parseLayoutSize = function () {\n        parse_1.parseConcatLayoutSize(this);\n    };\n    ConcatModel.prototype.parseAxisGroup = function () {\n        return null;\n    };\n    ConcatModel.prototype.assembleDefaultLayout = function () {\n        return tslib_1.__assign({}, (this.isVConcat ? { columns: 1 } : {}), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    };\n    return ConcatModel;\n}(baseconcat_1.BaseConcatModel));\nexports.ConcatModel = ConcatModel;\n"},"sourceMaps":{"js":{"version":3,"file":"concat.js","sourceRoot":"","sources":["../../../src/compile/concat.ts"],"names":[],"mappings":";;;AACA,kDAA8B;AAC9B,gCAA4D;AAE5D,2CAA6C;AAC7C,2CAAwC;AACxC,4CAAyD;AAIzD;IAAiC,uCAAe;IAO9C,qBAAY,IAA0B,EAAE,MAAa,EAAE,eAAuB,EAAE,QAAuB,EAAE,MAAc;QAAvH,YACE,kBAAM,IAAI,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,SAWrE;QAlBe,UAAI,GAAa,QAAQ,CAAC;QASxC,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,QAAQ,CAAC,EAAE;YAC/G,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;SAChD;QAED,KAAI,CAAC,SAAS,GAAG,oBAAa,CAAC,IAAI,CAAC,CAAC;QAErC,KAAI,CAAC,QAAQ,GAAG,CAAC,oBAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,CAAC;YAC/E,OAAO,uBAAU,CAAC,KAAK,EAAE,KAAI,EAAE,KAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAClG,CAAC,CAAC,CAAC;;IACL,CAAC;IAEM,qCAAe,GAAtB;QACE,6BAAqB,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAGM,oCAAc,GAArB;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IAES,2CAAqB,GAA/B;QACE,4BACK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAC,OAAO,EAAE,CAAC,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IACvC,MAAM,EAAE,MAAM;YACd,wEAAwE;YACxE,KAAK,EAAE,MAAM,IACb;IACJ,CAAC;IACH,kBAAC;AAAD,CAAC,AAtCD,CAAiC,4BAAe,GAsC/C;AAtCY,kCAAW","sourcesContent":["import {Config} from '../config';\nimport * as log from '../log';\nimport {isVConcatSpec, NormalizedConcatSpec} from '../spec';\nimport {VgLayout} from '../vega.schema';\nimport {BaseConcatModel} from './baseconcat';\nimport {buildModel} from './buildmodel';\nimport {parseConcatLayoutSize} from './layoutsize/parse';\nimport {Model} from './model';\nimport {RepeaterValue} from './repeater';\n\nexport class ConcatModel extends BaseConcatModel {\n  public readonly type: 'concat' = 'concat';\n\n  public readonly children: Model[];\n\n  public readonly isVConcat: boolean;\n\n  constructor(spec: NormalizedConcatSpec, parent: Model, parentGivenName: string, repeater: RepeaterValue, config: Config) {\n    super(spec, parent, parentGivenName, config, repeater, spec.resolve);\n\n    if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n      log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n    }\n\n    this.isVConcat = isVConcatSpec(spec);\n\n    this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map((child, i) => {\n      return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config, false);\n    });\n  }\n\n  public parseLayoutSize() {\n    parseConcatLayoutSize(this);\n  }\n\n\n  public parseAxisGroup(): void {\n    return null;\n  }\n\n  protected assembleDefaultLayout(): VgLayout {\n    return {\n      ...(this.isVConcat ? {columns: 1} : {}),\n      bounds: 'full',\n      // Use align each so it can work with multiple plots with different size\n      align: 'each'\n    };\n  }\n}\n"]}},"error":null,"hash":"f0393e76d7101b95dd300efad631861e","cacheData":{"env":{}}}