{"id":"node_modules/vega-lite/build/src/sort.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/sort.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"vega-util","loc":{"line":3,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/sort.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-util/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nfunction isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\nexports.isSortField = isSortField;\nfunction isSortArray(sort) {\n    return !!sort && vega_util_1.isArray(sort);\n}\nexports.isSortArray = isSortArray;\n"},"sourceMaps":{"js":{"version":3,"file":"sort.js","sourceRoot":"","sources":["../../src/sort.ts"],"names":[],"mappings":";;AACA,uCAAkC;AAmDlC,qBAA+B,IAAa;IAC1C,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/E,CAAC;AAFD,kCAEC;AAED,qBAA+B,IAAa;IAC1C,OAAO,CAAC,CAAC,IAAI,IAAI,mBAAO,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC;AAFD,kCAEC","sourcesContent":["import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {DateTime} from './datetime';\nimport {VgComparatorOrder} from './vega.schema';\n\nexport type SortOrder = VgComparatorOrder | null;\n\n\n/**\n * A sort definition for transform\n */\nexport interface SortField {\n  /**\n   * The name of the field to sort.\n   */\n  field: string;\n\n  /**\n   * Whether to sort the field in ascending or descending order.\n   */\n  order?: VgComparatorOrder;\n}\n\n\n/**\n * A sort definition for sorting a discrete scale in an encoding field definition.\n */\n\nexport interface EncodingSortField<F> {\n  /**\n   * The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n   *\n   * __Default value:__ If unspecified, defaults to the field specified in the outer data reference.\n   */\n  field?: F;\n  /**\n   * An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `\"count\"`, `\"mean\"` and `\"median\"`).\n   * This property is required in cases where the sort field and the data reference field do not match.\n   * The input data objects will be aggregated, grouped by the encoded data field.\n   *\n   * For a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n   */\n  op: AggregateOp;\n\n  /**\n   * The sort order. One of `\"ascending\"` (default), `\"descending\"`, or `null` (no not sort).\n   */\n  order?: SortOrder;\n}\n\nexport type Sort<F> = number[] | string[] | boolean[] | DateTime[] | SortOrder | EncodingSortField<F> | null;\n\nexport function isSortField<F>(sort: Sort<F>): sort is EncodingSortField<F> {\n  return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\n\nexport function isSortArray<F>(sort: Sort<F>): sort is number[] | string[] | boolean[] | DateTime[] {\n  return !!sort && isArray(sort);\n}\n"]}},"error":null,"hash":"27d979939b811d5305d0a2990e26e6fd","cacheData":{"env":{}}}