{"id":"node_modules/vega-lite/build/src/compile/data/window.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"../../fielddef","loc":{"line":4,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/fielddef.js"},{"name":"../../sort","loc":{"line":5,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/sort.js"},{"name":"../../util","loc":{"line":6,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/util.js"},{"name":"../facet","loc":{"line":7,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/facet.js"},{"name":"./dataflow","loc":{"line":8,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/window.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar sort_1 = require(\"../../sort\");\nvar util_1 = require(\"../../util\");\nvar facet_1 = require(\"../facet\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * A class for the window transform nodes\n */\nvar WindowTransformNode = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowTransformNode, _super);\n    function WindowTransformNode(parent, transform) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        return _this;\n    }\n    WindowTransformNode.makeFromFacet = function (parent, facet) {\n        var row = facet.row, column = facet.column;\n        if (row && column) {\n            var newParent = null;\n            // only need to make one for crossed facet\n            for (var _i = 0, _a = [row, column]; _i < _a.length; _i++) {\n                var fieldDef = _a[_i];\n                if (sort_1.isSortField(fieldDef.sort)) {\n                    var _b = fieldDef.sort, field = _b.field, op = _b.op;\n                    parent = newParent = new WindowTransformNode(parent, {\n                        window: [{\n                                op: op,\n                                field: field,\n                                as: facet_1.facetSortFieldName(fieldDef, fieldDef.sort)\n                            }],\n                        groupby: [fielddef_1.vgField(fieldDef)],\n                        frame: [null, null]\n                    });\n                }\n            }\n            return newParent;\n        }\n        return null;\n    };\n    WindowTransformNode.prototype.clone = function () {\n        return new WindowTransformNode(this.parent, util_1.duplicate(this.transform));\n    };\n    WindowTransformNode.prototype.producedFields = function () {\n        var _this = this;\n        var out = {};\n        this.transform.window.forEach(function (windowFieldDef) {\n            out[_this.getDefaultName(windowFieldDef)] = true;\n        });\n        return out;\n    };\n    WindowTransformNode.prototype.getDefaultName = function (windowFieldDef) {\n        return windowFieldDef.as || fielddef_1.vgField(windowFieldDef);\n    };\n    WindowTransformNode.prototype.assemble = function () {\n        var fields = [];\n        var ops = [];\n        var as = [];\n        var params = [];\n        for (var _i = 0, _a = this.transform.window; _i < _a.length; _i++) {\n            var window_1 = _a[_i];\n            ops.push(window_1.op);\n            as.push(this.getDefaultName(window_1));\n            params.push(window_1.param === undefined ? null : window_1.param);\n            fields.push(window_1.field === undefined ? null : window_1.field);\n        }\n        var frame = this.transform.frame;\n        var groupby = this.transform.groupby;\n        var sortFields = [];\n        var sortOrder = [];\n        if (this.transform.sort !== undefined) {\n            for (var _b = 0, _c = this.transform.sort; _b < _c.length; _b++) {\n                var sortField = _c[_b];\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order || 'ascending');\n            }\n        }\n        var sort = {\n            field: sortFields,\n            order: sortOrder,\n        };\n        var ignorePeers = this.transform.ignorePeers;\n        var result = {\n            type: 'window',\n            params: params,\n            as: as,\n            ops: ops,\n            fields: fields,\n            sort: sort,\n        };\n        if (ignorePeers !== undefined) {\n            result.ignorePeers = ignorePeers;\n        }\n        if (groupby !== undefined) {\n            result.groupby = groupby;\n        }\n        if (frame !== undefined) {\n            result.frame = frame;\n        }\n        return result;\n    };\n    return WindowTransformNode;\n}(dataflow_1.DataFlowNode));\nexports.WindowTransformNode = WindowTransformNode;\n"},"sourceMaps":{"js":{"version":3,"file":"window.js","sourceRoot":"","sources":["../../../../src/compile/data/window.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {FacetMapping} from '../../facet';\nimport {vgField} from '../../fielddef';\nimport {isSortField} from '../../sort';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate} from '../../util';\nimport {VgComparator, VgComparatorOrder, VgWindowTransform} from '../../vega.schema';\nimport {facetSortFieldName} from '../facet';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public static makeFromFacet(parent: DataFlowNode, facet: FacetMapping<string>): WindowTransformNode {\n    const {row, column} = facet;\n    if (row && column) {\n      let newParent = null;\n      // only need to make one for crossed facet\n      for (const fieldDef of [row, column]) {\n        if (isSortField(fieldDef.sort)) {\n          const {field, op} = fieldDef.sort;\n          parent = newParent = new WindowTransformNode(parent, {\n            window: [{\n              op,\n              field,\n              as: facetSortFieldName(fieldDef, fieldDef.sort)\n            }],\n            groupby: [vgField(fieldDef)],\n            frame: [null, null]\n          });\n        }\n      }\n      return newParent;\n    }\n    return null;\n  }\n\n\n  public clone() {\n    return new WindowTransformNode(this.parent, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: WindowTransform) {\n    super(parent);\n  }\n\n  public producedFields() {\n    const out = {};\n    this.transform.window.forEach(windowFieldDef => {\n      out[this.getDefaultName(windowFieldDef)] = true;\n    });\n\n    return out;\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as || vgField(windowFieldDef);\n  }\n\n  public assemble(): VgWindowTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as = [];\n    const params = [];\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order || 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder,\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    const result: VgWindowTransform = {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort,\n    };\n\n    if (ignorePeers !== undefined) {\n      result.ignorePeers = ignorePeers;\n    }\n\n    if (groupby !== undefined) {\n      result.groupby = groupby;\n    }\n\n    if (frame !== undefined) {\n      result.frame = frame;\n    }\n\n    return result;\n  }\n}\n"]}},"error":null,"hash":"2fb26f6e6b0ce6a6e5665e26725a4aa6","cacheData":{"env":{}}}