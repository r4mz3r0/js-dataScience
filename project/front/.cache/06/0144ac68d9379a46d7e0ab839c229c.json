{"id":"node_modules/vega-lite/build/src/compile/data/stack.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"vega-util","loc":{"line":4,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-util/index.js"},{"name":"../../fielddef","loc":{"line":5,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/fielddef.js"},{"name":"../../util","loc":{"line":6,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/util.js"},{"name":"../common","loc":{"line":7,"column":23},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/common.js"},{"name":"./dataflow","loc":{"line":8,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/stack.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/data/dataflow.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar fielddef_1 = require(\"../../fielddef\");\nvar util_1 = require(\"../../util\");\nvar common_1 = require(\"../common\");\nvar dataflow_1 = require(\"./dataflow\");\nfunction getStackByFields(model) {\n    return model.stack.stackBy.reduce(function (fields, by) {\n        var fieldDef = by.fieldDef;\n        var _field = fielddef_1.vgField(fieldDef);\n        if (_field) {\n            fields.push(_field);\n        }\n        return fields;\n    }, []);\n}\nfunction isValidAsArray(as) {\n    return vega_util_1.isArray(as) && as.every(function (s) { return vega_util_1.isString(s); }) && as.length > 1;\n}\nvar StackNode = /** @class */ (function (_super) {\n    tslib_1.__extends(StackNode, _super);\n    function StackNode(parent, stack) {\n        var _this = _super.call(this, parent) || this;\n        _this._stack = stack;\n        return _this;\n    }\n    StackNode.prototype.clone = function () {\n        return new StackNode(null, util_1.duplicate(this._stack));\n    };\n    StackNode.makeFromTransform = function (parent, stackTransform) {\n        var stack = stackTransform.stack, groupby = stackTransform.groupby, as = stackTransform.as, _a = stackTransform.offset, offset = _a === void 0 ? 'zero' : _a;\n        var sortFields = [];\n        var sortOrder = [];\n        if (stackTransform.sort !== undefined) {\n            for (var _i = 0, _b = stackTransform.sort; _i < _b.length; _i++) {\n                var sortField = _b[_i];\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order === undefined ? 'ascending' : sortField.order);\n            }\n        }\n        var sort = {\n            field: sortFields,\n            order: sortOrder,\n        };\n        var normalizedAs;\n        if (isValidAsArray(as)) {\n            normalizedAs = as;\n        }\n        else if (vega_util_1.isString(as)) {\n            normalizedAs = [as, as + '_end'];\n        }\n        else {\n            normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n        }\n        return new StackNode(parent, {\n            stackField: stack,\n            groupby: groupby,\n            offset: offset,\n            sort: sort,\n            facetby: [],\n            as: normalizedAs\n        });\n    };\n    StackNode.makeFromEncoding = function (parent, model) {\n        var stackProperties = model.stack;\n        if (!stackProperties) {\n            return null;\n        }\n        var dimensionFieldDef;\n        if (stackProperties.groupbyChannel) {\n            dimensionFieldDef = model.fieldDef(stackProperties.groupbyChannel);\n        }\n        var stackby = getStackByFields(model);\n        var orderDef = model.encoding.order;\n        var sort;\n        if (vega_util_1.isArray(orderDef) || fielddef_1.isFieldDef(orderDef)) {\n            sort = common_1.sortParams(orderDef);\n        }\n        else {\n            // default = descending by stackFields\n            // FIXME is the default here correct for binned fields?\n            sort = stackby.reduce(function (s, field) {\n                s.field.push(field);\n                s.order.push('descending');\n                return s;\n            }, { field: [], order: [] });\n        }\n        // Refactored to add \"as\" in the make phase so that we can get producedFields\n        // from the as property\n        var field = model.vgField(stackProperties.fieldChannel);\n        return new StackNode(parent, {\n            dimensionFieldDef: dimensionFieldDef,\n            stackField: field,\n            facetby: [],\n            stackby: stackby,\n            sort: sort,\n            offset: stackProperties.offset,\n            impute: stackProperties.impute,\n            as: [field + '_start', field + '_end']\n        });\n    };\n    Object.defineProperty(StackNode.prototype, \"stack\", {\n        get: function () {\n            return this._stack;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackNode.prototype.addDimensions = function (fields) {\n        this._stack.facetby = this._stack.facetby.concat(fields);\n    };\n    StackNode.prototype.dependentFields = function () {\n        var out = {};\n        out[this._stack.stackField] = true;\n        this.getGroupbyFields().forEach(function (f) { return out[f] = true; });\n        this._stack.facetby.forEach(function (f) { return out[f] = true; });\n        var field = this._stack.sort.field;\n        vega_util_1.isArray(field) ? field.forEach(function (f) { return out[f] = true; }) : out[field] = true;\n        return out;\n    };\n    StackNode.prototype.producedFields = function () {\n        return this._stack.as.reduce(function (result, item) {\n            result[item] = true;\n            return result;\n        }, {});\n    };\n    StackNode.prototype.getGroupbyFields = function () {\n        var _a = this._stack, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute, groupby = _a.groupby;\n        if (dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                if (impute) {\n                    // For binned group by field with impute, we calculate bin_mid\n                    // as we cannot impute two fields simultaneously\n                    return [fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'mid' })];\n                }\n                return [\n                    // For binned group by field without impute, we need both bin (start) and bin_end\n                    fielddef_1.vgField(dimensionFieldDef, {}),\n                    fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'end' })\n                ];\n            }\n            return [fielddef_1.vgField(dimensionFieldDef)];\n        }\n        return groupby || [];\n    };\n    StackNode.prototype.assemble = function () {\n        var transform = [];\n        var _a = this._stack, facetby = _a.facetby, dimensionFieldDef = _a.dimensionFieldDef, field = _a.stackField, stackby = _a.stackby, sort = _a.sort, offset = _a.offset, impute = _a.impute, as = _a.as;\n        // Impute\n        if (impute && dimensionFieldDef) {\n            var dimensionField = dimensionFieldDef ? fielddef_1.vgField(dimensionFieldDef, { binSuffix: 'mid' }) : undefined;\n            if (dimensionFieldDef.bin) {\n                // As we can only impute one field at a time, we need to calculate\n                // mid point for a binned field\n                transform.push({\n                    type: 'formula',\n                    expr: '(' +\n                        fielddef_1.vgField(dimensionFieldDef, { expr: 'datum' }) +\n                        '+' +\n                        fielddef_1.vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +\n                        ')/2',\n                    as: dimensionField\n                });\n            }\n            transform.push({\n                type: 'impute',\n                field: field,\n                groupby: stackby,\n                key: dimensionField,\n                method: 'value',\n                value: 0\n            });\n        }\n        // Stack\n        transform.push({\n            type: 'stack',\n            groupby: this.getGroupbyFields().concat(facetby),\n            field: field,\n            sort: sort,\n            as: as,\n            offset: offset\n        });\n        return transform;\n    };\n    return StackNode;\n}(dataflow_1.DataFlowNode));\nexports.StackNode = StackNode;\n"},"sourceMaps":{"js":{"version":3,"file":"stack.js","sourceRoot":"","sources":["../../../../src/compile/data/stack.ts"],"names":[],"mappings":";;;AAAA,uCAA4C;AAC5C,2CAA6D;AAG7D,mCAAqC;AAErC,oCAAqC;AAErC,uCAAwC;AAExC,0BAA0B,KAAgB;IACxC,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,EAAE;QAC3C,IAAM,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;QAE7B,IAAM,MAAM,GAAG,kBAAO,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACrB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAc,CAAC,CAAC;AACrB,CAAC;AAgDD,wBAAwB,EAAqB;IAC3C,OAAO,mBAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,oBAAQ,CAAC,CAAC,CAAC,EAAX,CAAW,CAAC,IAAI,EAAE,CAAC,MAAM,GAAE,CAAC,CAAC;AACnE,CAAC;AAED;IAA+B,qCAAY;IAOzC,mBAAY,MAAoB,EAAE,KAAqB;QAAvD,YACE,kBAAM,MAAM,CAAC,SAGd;QADC,KAAI,CAAC,MAAM,GAAG,KAAK,CAAC;;IACtB,CAAC;IARM,yBAAK,GAAZ;QACE,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,gBAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACrD,CAAC;IAQa,2BAAiB,GAA/B,UAAgC,MAAoB,EAAE,cAA8B;QAE3E,IAAA,4BAAK,EAAE,gCAAO,EAAE,sBAAE,EAAE,0BAAa,EAAb,oCAAa,CAAmB;QAE3D,IAAM,UAAU,GAAa,EAAE,CAAC;QAChC,IAAM,SAAS,GAAwB,EAAE,CAAC;QAC1C,IAAI,cAAc,CAAC,IAAI,KAAK,SAAS,EAAE;YACrC,KAAwB,UAAmB,EAAnB,KAAA,cAAc,CAAC,IAAI,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;gBAAxC,IAAM,SAAS,SAAA;gBAClB,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACjC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,KAA0B,CAAC,CAAC;aACpG;SACF;QACD,IAAM,IAAI,GAAW;YACnB,KAAK,EAAE,UAAU;YACjB,KAAK,EAAE,SAAS;SACjB,CAAC;QACF,IAAI,YAA2B,CAAC;QAChC,IAAI,cAAc,CAAC,EAAE,CAAC,EAAE;YACtB,YAAY,GAAG,EAAE,CAAC;SACnB;aAAM,IAAG,oBAAQ,CAAC,EAAE,CAAC,EAAE;YACtB,YAAY,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,CAAC;SAClC;aAAM;YACL,YAAY,GAAG,CAAC,cAAc,CAAC,KAAK,GAAG,QAAQ,EAAE,cAAc,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC;SACjF;QAED,OAAO,IAAI,SAAS,CAAE,MAAM,EAAE;YAC5B,UAAU,EAAE,KAAK;YACjB,OAAO,SAAA;YACP,MAAM,QAAA;YACN,IAAI,MAAA;YACJ,OAAO,EAAE,EAAE;YACX,EAAE,EAAE,YAAY;SACjB,CAAC,CAAC;IAEL,CAAC;IACa,0BAAgB,GAA9B,UAA+B,MAAoB,EAAE,KAAgB;QAEnE,IAAM,eAAe,GAAG,KAAK,CAAC,KAAK,CAAC;QAEpC,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,iBAAmC,CAAC;QACxC,IAAI,eAAe,CAAC,cAAc,EAAE;YAClC,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;SACpE;QAED,IAAM,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACxC,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;QAEtC,IAAI,IAAY,CAAC;QACjB,IAAI,mBAAO,CAAC,QAAQ,CAAC,IAAI,qBAAU,CAAC,QAAQ,CAAC,EAAE;YAC7C,IAAI,GAAG,mBAAU,CAAC,QAAQ,CAAC,CAAC;SAC7B;aAAM;YACL,sCAAsC;YACtC,uDAAuD;YACvD,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,KAAK;gBAC7B,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACpB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC3B,OAAO,CAAC,CAAC;YACX,CAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAE,KAAK,EAAE,EAAE,EAAC,CAAC,CAAC;SAC3B;QACD,6EAA6E;QAC7E,uBAAuB;QACvB,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAE1D,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE;YAC3B,iBAAiB,mBAAA;YACjB,UAAU,EAAC,KAAK;YAChB,OAAO,EAAE,EAAE;YACX,OAAO,SAAA;YACP,IAAI,MAAA;YACJ,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,EAAE,EAAE,CAAC,KAAK,GAAG,QAAQ,EAAE,KAAK,GAAG,MAAM,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAED,sBAAI,4BAAK;aAAT;YACE,OAAO,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;;;OAAA;IAEM,iCAAa,GAApB,UAAqB,MAAgB;QACnC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAEM,mCAAe,GAAtB;QACE,IAAM,GAAG,GAAG,EAAE,CAAC;QAEf,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QAEnC,IAAI,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,EAAb,CAAa,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,EAAb,CAAa,CAAC,CAAC;QAChD,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACrC,mBAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,EAAb,CAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAEvE,OAAO,GAAG,CAAC;IACb,CAAC;IAEM,kCAAc,GAArB;QACE,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAC,MAAM,EAAE,IAAI;YACxC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YACpB,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAEO,oCAAgB,GAAxB;QACQ,IAAA,gBAAkD,EAAjD,wCAAiB,EAAE,kBAAM,EAAE,oBAAO,CAAgB;QACzD,IAAI,iBAAiB,EAAE;YACrB,IAAI,iBAAiB,CAAC,GAAG,EAAE;gBACzB,IAAI,MAAM,EAAE;oBACV,8DAA8D;oBAC9D,gDAAgD;oBAChD,OAAO,CAAC,kBAAO,CAAC,iBAAiB,EAAE,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;iBACzD;gBACD,OAAO;oBACL,iFAAiF;oBACjF,kBAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;oBAC9B,kBAAO,CAAC,iBAAiB,EAAE,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;iBAC/C,CAAC;aACH;YACD,OAAO,CAAC,kBAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACrC;QACD,OAAO,OAAO,IAAI,EAAE,CAAC;IACvB,CAAC;IAEM,4BAAQ,GAAf;QACE,IAAM,SAAS,GAAkB,EAAE,CAAC;QAC9B,IAAA,gBAAgG,EAA/F,oBAAO,EAAE,wCAAiB,EAAE,qBAAiB,EAAE,oBAAO,EAAE,cAAI,EAAE,kBAAM,EAAE,kBAAM,EAAE,UAAE,CAAgB;QAErG,SAAS;QACX,IAAI,MAAM,IAAI,iBAAiB,EAAE;YAC/B,IAAM,cAAc,GAAG,iBAAiB,CAAC,CAAC,CAAC,kBAAO,CAAC,iBAAiB,EAAE,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAA,CAAC,CAAC,SAAS,CAAC;YAErG,IAAI,iBAAiB,CAAC,GAAG,EAAE;gBACzB,kEAAkE;gBAClE,+BAA+B;gBAC/B,SAAS,CAAC,IAAI,CAAC;oBACb,IAAI,EAAE,SAAS;oBACf,IAAI,EAAE,GAAG;wBACP,kBAAO,CAAC,iBAAiB,EAAE,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;wBAC3C,GAAG;wBACH,kBAAO,CAAC,iBAAiB,EAAE,EAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC;wBAC7D,KAAK;oBACP,EAAE,EAAE,cAAc;iBACnB,CAAC,CAAC;aACJ;YAED,SAAS,CAAC,IAAI,CAAC;gBACb,IAAI,EAAE,QAAQ;gBACd,KAAK,OAAA;gBACL,OAAO,EAAE,OAAO;gBAChB,GAAG,EAAE,cAAc;gBACnB,MAAM,EAAE,OAAO;gBACf,KAAK,EAAE,CAAC;aACT,CAAC,CAAC;SACJ;QAED,QAAQ;QACR,SAAS,CAAC,IAAI,CAAC;YACb,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;YAChD,KAAK,OAAA;YACL,IAAI,MAAA;YACJ,EAAE,IAAA;YACF,MAAM,QAAA;SACP,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACnB,CAAC;IACH,gBAAC;AAAD,CAAC,AAxLD,CAA+B,uBAAY,GAwL1C;AAxLY,8BAAS","sourcesContent":["import {isArray, isString} from 'vega-util';\nimport {FieldDef, isFieldDef, vgField} from '../../fielddef';\nimport {StackOffset} from '../../stack';\nimport {StackTransform} from '../../transform';\nimport {duplicate} from '../../util';\nimport {VgComparatorOrder, VgSort, VgTransform} from '../../vega.schema';\nimport {sortParams} from '../common';\nimport {UnitModel} from './../unit';\nimport {DataFlowNode} from './dataflow';\n\nfunction getStackByFields(model: UnitModel): string[] {\n  return model.stack.stackBy.reduce((fields, by) => {\n    const fieldDef = by.fieldDef;\n\n    const _field = vgField(fieldDef);\n    if (_field) {\n      fields.push(_field);\n    }\n    return fields;\n  }, [] as string[]);\n}\n\nexport interface StackComponent {\n\n  /**\n   * Faceted field.\n   */\n  facetby: string[];\n\n  dimensionFieldDef?: FieldDef<string>;\n\n  /**\n   * Stack measure's field. Used in makeFromEncoding.\n   */\n  stackField: string;\n\n  /**\n   * Level of detail fields for each level in the stacked charts such as color or detail.\n   * Used in makeFromEncoding.\n   */\n  stackby?: string[];\n\n  /**\n   * Field that determines order of levels in the stacked charts.\n   * Used in both but optional in transform.\n   */\n  sort: VgSort;\n\n  /** Mode for stacking marks.\n   */\n  offset: StackOffset;\n\n  /**\n   * Whether to impute the data before stacking. Used only in makeFromEncoding.\n   */\n  impute?: boolean;\n\n  /**\n   * The data fields to group by.\n   */\n  groupby?: string[];\n  /**\n   * Output field names of each stack field.\n   */\n  as: string[];\n\n}\n\nfunction isValidAsArray(as: string[] | string): as is string[] {\n  return isArray(as) && as.every(s => isString(s)) && as.length >1;\n}\n\nexport class StackNode extends DataFlowNode {\n  private _stack: StackComponent;\n\n  public clone() {\n    return new StackNode(null, duplicate(this._stack));\n  }\n\n  constructor(parent: DataFlowNode, stack: StackComponent) {\n    super(parent);\n\n    this._stack = stack;\n  }\n\n  public static makeFromTransform(parent: DataFlowNode, stackTransform: StackTransform) {\n\n    const {stack, groupby, as, offset='zero'} = stackTransform;\n\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (stackTransform.sort !== undefined) {\n      for (const sortField of stackTransform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order === undefined ? 'ascending' : sortField.order as VgComparatorOrder);\n      }\n    }\n    const sort: VgSort = {\n      field: sortFields,\n      order: sortOrder,\n    };\n    let normalizedAs: Array<string>;\n    if (isValidAsArray(as)) {\n      normalizedAs = as;\n    } else if(isString(as)) {\n      normalizedAs = [as, as + '_end'];\n    } else {\n      normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n    }\n\n    return new StackNode (parent, {\n      stackField: stack,\n      groupby,\n      offset,\n      sort,\n      facetby: [],\n      as: normalizedAs\n    });\n\n  }\n  public static makeFromEncoding(parent: DataFlowNode, model: UnitModel) {\n\n    const stackProperties = model.stack;\n\n    if (!stackProperties) {\n      return null;\n    }\n\n    let dimensionFieldDef: FieldDef<string>;\n    if (stackProperties.groupbyChannel) {\n      dimensionFieldDef = model.fieldDef(stackProperties.groupbyChannel);\n    }\n\n    const stackby = getStackByFields(model);\n    const orderDef = model.encoding.order;\n\n    let sort: VgSort;\n    if (isArray(orderDef) || isFieldDef(orderDef)) {\n      sort = sortParams(orderDef);\n    } else {\n      // default = descending by stackFields\n      // FIXME is the default here correct for binned fields?\n      sort = stackby.reduce((s, field) => {\n        s.field.push(field);\n        s.order.push('descending');\n        return s;\n      }, {field:[], order: []});\n    }\n    // Refactored to add \"as\" in the make phase so that we can get producedFields\n    // from the as property\n    const field = model.vgField(stackProperties.fieldChannel);\n\n    return new StackNode(parent, {\n      dimensionFieldDef,\n      stackField:field,\n      facetby: [],\n      stackby,\n      sort,\n      offset: stackProperties.offset,\n      impute: stackProperties.impute,\n      as: [field + '_start', field + '_end']\n    });\n  }\n\n  get stack(): StackComponent {\n    return this._stack;\n  }\n\n  public addDimensions(fields: string[]) {\n    this._stack.facetby = this._stack.facetby.concat(fields);\n  }\n\n  public dependentFields() {\n    const out = {};\n\n    out[this._stack.stackField] = true;\n\n    this.getGroupbyFields().forEach(f => out[f] = true);\n    this._stack.facetby.forEach(f => out[f] = true);\n    const field = this._stack.sort.field;\n    isArray(field) ? field.forEach(f => out[f] = true) : out[field] = true;\n\n    return out;\n  }\n\n  public producedFields() {\n    return this._stack.as.reduce((result, item) => {\n      result[item] = true;\n      return result;\n    }, {});\n  }\n\n  private getGroupbyFields() {\n    const {dimensionFieldDef, impute, groupby} = this._stack;\n    if (dimensionFieldDef) {\n      if (dimensionFieldDef.bin) {\n        if (impute) {\n          // For binned group by field with impute, we calculate bin_mid\n          // as we cannot impute two fields simultaneously\n          return [vgField(dimensionFieldDef, {binSuffix: 'mid'})];\n        }\n        return [\n          // For binned group by field without impute, we need both bin (start) and bin_end\n          vgField(dimensionFieldDef, {}),\n          vgField(dimensionFieldDef, {binSuffix: 'end'})\n        ];\n      }\n      return [vgField(dimensionFieldDef)];\n    }\n    return groupby || [];\n  }\n\n  public assemble(): VgTransform[] {\n    const transform: VgTransform[] = [];\n    const {facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as} = this._stack;\n\n      // Impute\n    if (impute && dimensionFieldDef) {\n      const dimensionField = dimensionFieldDef ? vgField(dimensionFieldDef, {binSuffix: 'mid'}): undefined;\n\n      if (dimensionFieldDef.bin) {\n        // As we can only impute one field at a time, we need to calculate\n        // mid point for a binned field\n        transform.push({\n          type: 'formula',\n          expr: '(' +\n            vgField(dimensionFieldDef, {expr: 'datum'}) +\n            '+' +\n            vgField(dimensionFieldDef, {expr: 'datum', binSuffix: 'end'}) +\n            ')/2',\n          as: dimensionField\n        });\n      }\n\n      transform.push({\n        type: 'impute',\n        field,\n        groupby: stackby,\n        key: dimensionField,\n        method: 'value',\n        value: 0\n      });\n    }\n\n    // Stack\n    transform.push({\n      type: 'stack',\n      groupby: this.getGroupbyFields().concat(facetby),\n      field,\n      sort,\n      as,\n      offset\n    });\n\n    return transform;\n  }\n}\n"]}},"error":null,"hash":"be489aaa91ccb1fc22fc9adc15e1ed66","cacheData":{"env":{}}}