{"id":"node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"../../../log","loc":{"line":4,"column":39},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/log.js"},{"name":"../../../mark","loc":{"line":5,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/mark.js"},{"name":"../selection","loc":{"line":6,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/selection.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar log = tslib_1.__importStar(require(\"../../../log\"));\nvar mark_1 = require(\"../../../mark\");\nvar selection_1 = require(\"../selection\");\nvar VORONOI = 'voronoi';\nvar nearest = {\n    has: function (selCmpt) {\n        return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    marks: function (model, selCmpt, marks) {\n        var _a = selection_1.positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var markType = model.mark;\n        if (mark_1.isPathMark(markType)) {\n            log.warn(log.message.nearestNotSupportForContinuous(markType));\n            return marks;\n        }\n        var cellDef = {\n            name: model.getName(VORONOI),\n            type: 'path',\n            from: { data: model.getName('marks') },\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' },\n                    strokeWidth: { value: 0.35 },\n                    stroke: { value: 'transparent' },\n                    isVoronoi: { value: true }\n                }\n            },\n            transform: [{\n                    type: 'voronoi',\n                    x: { expr: (x || (!x && !y)) ? 'datum.datum.x || 0' : '0' },\n                    y: { expr: (y || (!x && !y)) ? 'datum.datum.y || 0' : '0' },\n                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n                }]\n        };\n        var index = 0;\n        var exists = false;\n        marks.forEach(function (mark, i) {\n            var name = mark.name || '';\n            if (name === model.component.mark[0].name) {\n                index = i;\n            }\n            else if (name.indexOf(VORONOI) >= 0) {\n                exists = true;\n            }\n        });\n        if (!exists) {\n            marks.splice(index + 1, 0, cellDef);\n        }\n        return marks;\n    }\n};\nexports.default = nearest;\n"},"sourceMaps":{"js":{"version":3,"file":"nearest.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/nearest.ts"],"names":[],"mappings":";;;AAAA,wDAAoC;AACpC,sCAAyC;AACzC,0CAAmD;AAGnD,IAAM,OAAO,GAAG,SAAS,CAAC;AAE1B,IAAM,OAAO,GAAqB;IAChC,GAAG,EAAE,UAAS,OAAO;QACnB,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC;IACxD,CAAC;IAED,KAAK,EAAE,UAAS,KAAK,EAAE,OAAO,EAAE,KAAK;QAC7B,IAAA,+CAAuC,EAAtC,QAAC,EAAE,QAAC,CAAmC;QAC9C,IAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC;QAC5B,IAAI,iBAAU,CAAC,QAAQ,CAAC,EAAE;YACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/D,OAAO,KAAK,CAAC;SACd;QAED,IAAM,OAAO,GAAG;YACd,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;YAC5B,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,EAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC;YACpC,MAAM,EAAE;gBACN,KAAK,EAAE;oBACL,IAAI,EAAE,EAAC,KAAK,EAAE,aAAa,EAAC;oBAC5B,WAAW,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC;oBAC1B,MAAM,EAAE,EAAC,KAAK,EAAE,aAAa,EAAC;oBAC9B,SAAS,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC;iBACzB;aACF;YACD,SAAS,EAAE,CAAC;oBACV,IAAI,EAAE,SAAS;oBACf,CAAC,EAAE,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,EAAC;oBACzD,CAAC,EAAE,EAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,EAAC;oBACzD,IAAI,EAAE,CAAC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;iBAC1E,CAAC;SACH,CAAC;QAEF,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,MAAM,GAAG,KAAK,CAAC;QACnB,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,CAAC;YACpB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;YAC7B,IAAI,IAAI,KAAK,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;gBACzC,KAAK,GAAG,CAAC,CAAC;aACX;iBAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACrC,MAAM,GAAG,IAAI,CAAC;aACf;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE;YACX,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;SACrC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC;AAEF,kBAAe,OAAO,CAAC","sourcesContent":["import * as log from '../../../log';\nimport {isPathMark} from '../../../mark';\nimport {positionalProjections} from '../selection';\nimport {TransformCompiler} from './transforms';\n\nconst VORONOI = 'voronoi';\n\nconst nearest:TransformCompiler = {\n  has: function(selCmpt) {\n    return selCmpt.type !== 'interval' && selCmpt.nearest;\n  },\n\n  marks: function(model, selCmpt, marks) {\n    const {x, y} = positionalProjections(selCmpt);\n    const markType = model.mark;\n    if (isPathMark(markType)) {\n      log.warn(log.message.nearestNotSupportForContinuous(markType));\n      return marks;\n    }\n\n    const cellDef = {\n      name: model.getName(VORONOI),\n      type: 'path',\n      from: {data: model.getName('marks')},\n      encode: {\n        enter: {\n          fill: {value: 'transparent'},\n          strokeWidth: {value: 0.35},\n          stroke: {value: 'transparent'},\n          isVoronoi: {value: true}\n        }\n      },\n      transform: [{\n        type: 'voronoi',\n        x: {expr: (x || (!x && !y)) ? 'datum.datum.x || 0' : '0'},\n        y: {expr: (y || (!x && !y)) ? 'datum.datum.y || 0' : '0'},\n        size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n      }]\n    };\n\n    let index = 0;\n    let exists = false;\n    marks.forEach((mark, i) => {\n      const name = mark.name || '';\n      if (name === model.component.mark[0].name) {\n        index = i;\n      } else if (name.indexOf(VORONOI) >= 0) {\n        exists = true;\n      }\n    });\n\n    if (!exists) {\n      marks.splice(index + 1, 0, cellDef);\n    }\n\n    return marks;\n  }\n};\n\nexport default nearest;\n"]}},"error":null,"hash":"3b31a329eb48cd2fdd95b844199f2260","cacheData":{"env":{}}}