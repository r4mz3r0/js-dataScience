{"id":"node_modules/vega-lite/build/src/predicate.js","dependencies":[{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js.map","includedInParent":true,"mtime":499162500000},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/package.json","includedInParent":true,"mtime":1593715260815},{"name":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":499162500000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/tslib/tslib.es6.js"},{"name":"vega-util","loc":{"line":4,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-util/index.js"},{"name":"./compile/selection/selection","loc":{"line":5,"column":26},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/compile/selection/selection.js"},{"name":"./fielddef","loc":{"line":6,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/fielddef.js"},{"name":"./timeunit","loc":{"line":7,"column":25},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/timeunit.js"},{"name":"./util","loc":{"line":8,"column":21},"parent":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/predicate.js","resolved":"/home/ramsiro/Desktop/JavaScriptDataScience/js-dataScience/project/front/node_modules/vega-lite/build/src/util.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar vega_util_1 = require(\"vega-util\");\nvar selection_1 = require(\"./compile/selection/selection\");\nvar fielddef_1 = require(\"./fielddef\");\nvar timeunit_1 = require(\"./timeunit\");\nvar util_1 = require(\"./util\");\nfunction isSelectionPredicate(predicate) {\n    return predicate && predicate['selection'];\n}\nexports.isSelectionPredicate = isSelectionPredicate;\nfunction isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexports.isFieldEqualPredicate = isFieldEqualPredicate;\nfunction isFieldLTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lt !== undefined;\n}\nexports.isFieldLTPredicate = isFieldLTPredicate;\nfunction isFieldLTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lte !== undefined;\n}\nexports.isFieldLTEPredicate = isFieldLTEPredicate;\nfunction isFieldGTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gt !== undefined;\n}\nexports.isFieldGTPredicate = isFieldGTPredicate;\nfunction isFieldGTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gte !== undefined;\n}\nexports.isFieldGTEPredicate = isFieldGTEPredicate;\nfunction isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n        if (vega_util_1.isArray(predicate.range) && predicate.range.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isFieldRangePredicate = isFieldRangePredicate;\nfunction isFieldOneOfPredicate(predicate) {\n    return predicate && !!predicate.field && (vega_util_1.isArray(predicate.oneOf) ||\n        vega_util_1.isArray(predicate.in) // backward compatibility\n    );\n}\nexports.isFieldOneOfPredicate = isFieldOneOfPredicate;\nfunction isFieldPredicate(predicate) {\n    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n}\nexports.isFieldPredicate = isFieldPredicate;\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nfunction expression(model, filterOp, node) {\n    return util_1.logicalExpr(filterOp, function (predicate) {\n        if (vega_util_1.isString(predicate)) {\n            return predicate;\n        }\n        else if (isSelectionPredicate(predicate)) {\n            return selection_1.selectionPredicate(model, predicate.selection, node);\n        }\n        else { // Filter Object\n            return fieldFilterExpression(predicate);\n        }\n    });\n}\nexports.expression = expression;\nfunction predicateValueExpr(v, timeUnit) {\n    return fielddef_1.valueExpr(v, { timeUnit: timeUnit, time: true });\n}\nfunction predicateValuesExpr(vals, timeUnit) {\n    return vals.map(function (v) { return predicateValueExpr(v, timeUnit); });\n}\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nfunction fieldFilterExpression(predicate, useInRange) {\n    if (useInRange === void 0) { useInRange = true; }\n    var field = predicate.field, timeUnit = predicate.timeUnit;\n    var fieldExpr = timeUnit ?\n        // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n        // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n        // TODO: support utc\n        ('time(' + timeunit_1.fieldExpr(timeUnit, field) + ')') :\n        fielddef_1.vgField(predicate, { expr: 'datum' });\n    if (isFieldEqualPredicate(predicate)) {\n        return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n    }\n    else if (isFieldLTPredicate(predicate)) {\n        var upper = predicate.lt;\n        return fieldExpr + \"<\" + predicateValueExpr(upper, timeUnit);\n    }\n    else if (isFieldGTPredicate(predicate)) {\n        var lower = predicate.gt;\n        return fieldExpr + \">\" + predicateValueExpr(lower, timeUnit);\n    }\n    else if (isFieldLTEPredicate(predicate)) {\n        var upper = predicate.lte;\n        return fieldExpr + \"<=\" + predicateValueExpr(upper, timeUnit);\n    }\n    else if (isFieldGTEPredicate(predicate)) {\n        var lower = predicate.gte;\n        return fieldExpr + \">=\" + predicateValueExpr(lower, timeUnit);\n    }\n    else if (isFieldOneOfPredicate(predicate)) {\n        // \"oneOf\" was formerly \"in\" -- so we need to add backward compatibility\n        var oneOf = predicate.oneOf;\n        oneOf = oneOf || predicate['in'];\n        return 'indexof([' +\n            predicateValuesExpr(oneOf, timeUnit).join(',') +\n            '], ' + fieldExpr + ') !== -1';\n    }\n    else if (isFieldRangePredicate(predicate)) {\n        var lower = predicate.range[0];\n        var upper = predicate.range[1];\n        if (lower !== null && upper !== null && useInRange) {\n            return 'inrange(' + fieldExpr + ', [' +\n                predicateValueExpr(lower, timeUnit) + ', ' +\n                predicateValueExpr(upper, timeUnit) + '])';\n        }\n        var exprs = [];\n        if (lower !== null) {\n            exprs.push(fieldExpr + \" >= \" + predicateValueExpr(lower, timeUnit));\n        }\n        if (upper !== null) {\n            exprs.push(fieldExpr + \" <= \" + predicateValueExpr(upper, timeUnit));\n        }\n        return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(\"Invalid field predicate: \" + JSON.stringify(predicate));\n}\nexports.fieldFilterExpression = fieldFilterExpression;\nfunction normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n        return tslib_1.__assign({}, f, { timeUnit: timeunit_1.normalizeTimeUnit(f.timeUnit) });\n    }\n    return f;\n}\nexports.normalizePredicate = normalizePredicate;\n"},"sourceMaps":{"js":{"version":3,"file":"predicate.js","sourceRoot":"","sources":["../../src/predicate.ts"],"names":[],"mappings":"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","sourcesContent":["import {isArray, isString} from 'vega-util';\nimport {DataFlowNode} from './compile/data/dataflow';\nimport {Model} from './compile/model';\nimport {selectionPredicate} from './compile/selection/selection';\nimport {DateTime} from './datetime';\nimport {valueExpr, vgField} from './fielddef';\nimport {LogicalOperand} from './logical';\nimport {fieldExpr as timeUnitFieldExpr, normalizeTimeUnit, TimeUnit} from './timeunit';\nimport {logicalExpr} from './util';\n\nexport type Predicate =\n  // a) FieldPredicate (but we don't type FieldFilter here so the schema has no nesting\n  // and thus the documentation shows all of the types clearly)\n  FieldEqualPredicate | FieldRangePredicate | FieldOneOfPredicate | FieldLTPredicate | FieldGTPredicate | FieldLTEPredicate | FieldGTEPredicate |\n  // b) Selection Predicate\n  SelectionPredicate |\n  // c) Vega Expression string\n  string;\n\n\n\nexport type FieldPredicate = FieldEqualPredicate | FieldLTPredicate | FieldGTPredicate | FieldLTEPredicate | FieldGTEPredicate |FieldRangePredicate | FieldOneOfPredicate;\n\nexport interface SelectionPredicate {\n  /**\n   * Filter using a selection name.\n   */\n  selection: LogicalOperand<string>;\n}\n\nexport function isSelectionPredicate(predicate: LogicalOperand<Predicate>): predicate is SelectionPredicate {\n  return predicate && predicate['selection'];\n}\n\nexport interface FieldPredicateBase {\n  // TODO: support aggregate\n\n  /**\n   * Time unit for the field to be filtered.\n   */\n  timeUnit?: TimeUnit;\n\n  /**\n   * Field to be filtered.\n   */\n  field: string;\n}\n\nexport interface FieldEqualPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be equal to.\n   */\n  equal: string | number | boolean | DateTime;\n\n}\n\nexport function isFieldEqualPredicate(predicate: any): predicate is FieldEqualPredicate {\n  return predicate && !!predicate.field && predicate.equal !== undefined;\n}\n\nexport interface FieldLTPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be less than.\n   */\n  lt: string | number | DateTime;\n\n}\n\nexport function isFieldLTPredicate(predicate: any): predicate is FieldLTPredicate {\n  return predicate && !!predicate.field && predicate.lt !== undefined;\n}\n\n\nexport interface FieldLTEPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be less than or equals to.\n   */\n  lte: string | number | DateTime;\n\n}\n\nexport function isFieldLTEPredicate(predicate: any): predicate is FieldLTEPredicate {\n  return predicate && !!predicate.field && predicate.lte !== undefined;\n}\n\n\nexport interface FieldGTPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be greater than.\n   */\n  gt: string | number | DateTime;\n\n}\n\nexport function isFieldGTPredicate(predicate: any): predicate is FieldGTPredicate {\n  return predicate && !!predicate.field && predicate.gt !== undefined;\n}\n\nexport interface FieldGTEPredicate extends FieldPredicateBase {\n  /**\n   * The value that the field should be greater than or equals to.\n   */\n  gte: string | number | DateTime;\n\n}\n\nexport function isFieldGTEPredicate(predicate: any): predicate is FieldGTEPredicate {\n  return predicate && !!predicate.field && predicate.gte !== undefined;\n}\n\nexport interface FieldRangePredicate extends FieldPredicateBase {\n  /**\n   * An array of inclusive minimum and maximum values\n   * for a field value of a data item to be included in the filtered data.\n   * @maxItems 2\n   * @minItems 2\n   */\n  range: (number|DateTime|null)[];\n}\n\nexport function isFieldRangePredicate(predicate: any): predicate is FieldRangePredicate {\n  if (predicate && predicate.field) {\n    if (isArray(predicate.range) && predicate.range.length === 2) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport interface FieldOneOfPredicate extends FieldPredicateBase {\n  /**\n   * A set of values that the `field`'s value should be a member of,\n   * for a data item included in the filtered data.\n   */\n  oneOf: string[] | number[] | boolean[] | DateTime[];\n\n}\n\nexport function isFieldOneOfPredicate(predicate: any): predicate is FieldOneOfPredicate {\n  return predicate && !!predicate.field && (\n    isArray(predicate.oneOf) ||\n    isArray(predicate.in) // backward compatibility\n  );\n}\n\nexport function isFieldPredicate(predicate: Predicate): predicate is FieldOneOfPredicate | FieldEqualPredicate | FieldRangePredicate | FieldLTPredicate | FieldGTPredicate | FieldLTEPredicate | FieldGTEPredicate {\n  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n}\n\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model: Model, filterOp: LogicalOperand<Predicate>, node?: DataFlowNode): string {\n  return logicalExpr(filterOp, (predicate: Predicate) => {\n    if (isString(predicate)) {\n      return predicate;\n    } else if (isSelectionPredicate(predicate)) {\n      return selectionPredicate(model, predicate.selection, node);\n    } else { // Filter Object\n      return fieldFilterExpression(predicate);\n    }\n  });\n}\n\nfunction predicateValueExpr(v: number | string | boolean | DateTime, timeUnit: TimeUnit) {\n  return valueExpr(v, {timeUnit, time: true});\n}\n\nfunction predicateValuesExpr(vals: (number|string | boolean | DateTime)[], timeUnit: TimeUnit) {\n  return vals.map((v) => predicateValueExpr(v, timeUnit));\n}\n\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate: FieldPredicate, useInRange=true) {\n  const {field, timeUnit} = predicate;\n  const fieldExpr = timeUnit ?\n    // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n      // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n      // TODO: support utc\n    ('time(' + timeUnitFieldExpr(timeUnit, field) + ')') :\n    vgField(predicate, {expr: 'datum'});\n\n  if (isFieldEqualPredicate(predicate)) {\n    return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n  } else if (isFieldLTPredicate(predicate)) {\n    const upper = predicate.lt;\n    return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTPredicate(predicate)) {\n    const lower = predicate.gt;\n    return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldLTEPredicate(predicate)) {\n    const upper = predicate.lte;\n    return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTEPredicate(predicate)) {\n    const lower = predicate.gte;\n    return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldOneOfPredicate(predicate)) {\n    // \"oneOf\" was formerly \"in\" -- so we need to add backward compatibility\n    let oneOf = predicate.oneOf;\n    oneOf = oneOf || predicate['in'];\n    return 'indexof([' +\n      predicateValuesExpr(oneOf, timeUnit).join(',') +\n    '], ' + fieldExpr + ') !== -1';\n  } else if (isFieldRangePredicate(predicate)) {\n    const lower = predicate.range[0];\n    const upper = predicate.range[1];\n\n    if (lower !== null && upper !== null && useInRange) {\n      return 'inrange(' + fieldExpr + ', [' +\n        predicateValueExpr(lower, timeUnit) + ', ' +\n        predicateValueExpr(upper, timeUnit) + '])';\n    }\n\n    const exprs = [];\n    if (lower !== null) {\n      exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);\n    }\n    if (upper !== null) {\n      exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);\n    }\n\n    return exprs.length > 0 ? exprs.join(' && ') : 'true';\n  }\n\n  /* istanbul ignore next: it should never reach here */\n  throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);\n}\n\nexport function normalizePredicate(f: Predicate): Predicate {\n  if (isFieldPredicate(f) && f.timeUnit) {\n    return {\n      ...f,\n      timeUnit: normalizeTimeUnit(f.timeUnit)\n    };\n  }\n  return f;\n}\n"]}},"error":null,"hash":"22e187833afe226b10881237c4c5eb63","cacheData":{"env":{}}}